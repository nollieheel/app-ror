#
# Cookbook:: app_ror
# Resource:: manage_puma
#
# Copyright:: 2021, Earth U

unified_mode true

# Project properties
property :app_dir, String,
         description: 'Working directory of Ruby project '\
                      'E.g. /var/src/myapp/current',
         name_property: true

property :base_dir, String,
         description: 'Base directory of project. Gets used if :conf_file '\
                      'is a relative path. Defaults to dirname of :app_dir.'

property :conf_file, String,
         description: 'Location of Puma config file',
         default: 'shared/puma.rb'

# Systemd properties
property :user, String,
         description: 'User that will run the Puma process',
         default: 'ubuntu'

property :env_file, String,
         description: 'EnvironmentFile location assigned to the systemd '\
                      'unit. Defaults to: /home/{user}/.etc/ruby_env if that '\
                      'file exists. Otherwise, no EnvironmentFile will be '\
                      'passed to systemd.'

property :unit_name, String,
         description: 'Name of the systemd unit',
         default: 'puma'

action_class do
  def prop_base_dir
    if property_is_set?(:base_dir)
      new_resource.base_dir
    else
      ::File.dirname(new_resource.app_dir)
    end
  end

  def prop_conf_file
    if new_resource.conf_file.start_with?('/')
      new_resource.conf_file
    else
      "#{prop_base_dir}/#{new_resource.conf_file}"
    end
  end

  def user_home
    "/home/#{new_resource.user}"
  end

  def prop_env_file
    f = if property_is_set?(:env_file)
          new_resource.env_file
        else
          "#{user_home}/.etc/ruby_env"
        end

    ::File.exist?(f) ? f : false
  end
end

action :create do
  execstart = "/bin/bash -lc 'bundle exec --keep-file-descriptors "\
              "puma -C #{prop_conf_file}'"

  service = {
    Type:             'simple',
    User:             new_resource.user,
    WorkingDirectory: new_resource.app_dir,
    Restart:          'always',
    ExecStart:        execstart,
  }

  if prop_env_file
    service[:EnvironmentFile] = prop_env_file
  end

  unit = {
    Unit: {
      Description: "Puma server for #{new_resource.app_dir}. Generated by Chef.",
      After:       'network.target',
    },
    Service: service,
    Install: {
      WantedBy: 'multi-user.target',
    },
  }

  systemd_unit "#{new_resource.unit_name}.service" do
    content unit
    verify  false
    action  [:create, :enable]
  end
end
