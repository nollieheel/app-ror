# Generated by Chef. Changes will be overwritten.
#
[Unit]
Description=Sidekiq Instance (index %I)
# start us only once the network and logging subsystems are available,
# consider adding redis-server.service if Redis is local and systemd-managed.
After=syslog.target network.target<%= @dependency[:systemd] ? " #{@dependency[:systemd]}" : '' %>

<%
app_dir = @app_dir.start_with?('/') ? @app_dir : "#{@base_dir}/#{@app_dir}"
log_dir = @log_dir.start_with?('/') ? @log_dir : "#{@base_dir}/#{@log_dir}"
pidfile_dir = @pidfile_dir.start_with?('/') ? @pidfile_dir : "#{@base_dir}/#{@pidfile_dir}"
conf_path = @conf_path.start_with?('/') ? @conf_path : "#{@base_dir}/#{@conf_path}"
-%>
[Service]
Type=simple
User=<%= @user %>
Group=<%= @group %>
WorkingDirectory=<%= app_dir %>
EnvironmentFile=-<%= @env_file %>
UMask=0002
ExecStart=/bin/bash -lc 'bundle exec sidekiq --index %i --environment <%= @environment %> --config <%= conf_path %> --pidfile <%= pidfile_dir %>/sidekiq-%i.pid --logfile <%= log_dir %>/sidekiq.log'

# if we crash, restart
RestartSec=1
Restart=on-failure

# output goes to /var/log/syslog
StandardOutput=syslog
StandardError=syslog

# This will default to "bundler" if we don't specify it
SyslogIdentifier=sidekiq

[Install]
WantedBy=multi-user.target
